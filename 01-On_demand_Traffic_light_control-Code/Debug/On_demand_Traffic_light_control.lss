
On_demand_Traffic_light_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000213a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000213a  000021ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800168  00800168  000022d6  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010bc  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00005573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  00007f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  00008efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  000091ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000099e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_1>
       8:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_2>
       c:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_10>
      2c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e3       	ldi	r30, 0x3A	; 58
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4e 10 	call	0x209c	; 0x209c <main>
      8a:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__clzsi2+0x40>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__clzsi2+0x36>
     856:	28 f0       	brcs	.+10     	; 0x862 <__clzsi2+0x36>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__clzsi2+0x64>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__clzsi2+0x64>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__clzsi2+0x5c>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__clzsi2+0x64>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__clzsi2+0x7e>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__clzsi2+0x76>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e8 59       	subi	r30, 0x98	; 152
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <TIMERS_Error_State_tTimer0Init>:
/*Global pointer to Function of Timer0 OVF*/
static void (*TIMERS_APTimer0_OVF_CTC[2])(void) = {NULL,NULL};


Error_State_t TIMERS_Error_State_tTimer0Init(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	Error_State_t L_enumFunctionState = RET_OK;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	89 83       	std	Y+1, r24	; 0x01
	switch(TIMERS_U8_TIMER0_Mode)
	{
	case TIMERS_U8_NORMAL_MODE:
		/*select Mode => Normal Mode*/
		CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_WGM00_PIN);
     c24:	a3 e5       	ldi	r26, 0x53	; 83
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e3 e5       	ldi	r30, 0x53	; 83
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8f 7b       	andi	r24, 0xBF	; 191
     c30:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_WGM01_PIN);
     c32:	a3 e5       	ldi	r26, 0x53	; 83
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e3 e5       	ldi	r30, 0x53	; 83
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	8c 93       	st	X, r24
		/*Enable/disable OVF Interrupt*/
		switch(TIMERS_U8_TIMER0_TNTERRUPT_MODE_OPTN)
		{
		case TIMERS_U8_TURN_OFF_INTERRUPT:
			CLR_BIT(TIMERS_U8_TIMSK_REG,TIMERS_U8_TOIE0_PIN);
     c40:	a9 e5       	ldi	r26, 0x59	; 89
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e9 e5       	ldi	r30, 0x59	; 89
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	8c 93       	st	X, r24
			break;
		default: L_enumFunctionState = RET_NOK;
			break;
		}
		/*set preload value*/
		TIMERS_U8_TCNT0_REG = TIMERS_U8_PRELOAD_INITIAL_VALUE; // this value for freq = 8 MHZ , and to make 1 sec delay, this value we should evaluate for every value we want
     c4e:	e2 e5       	ldi	r30, 0x52	; 82
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 ec       	ldi	r24, 0xC0	; 192
     c54:	80 83       	st	Z, r24
			SET_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS00_PIN);
			CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS01_PIN);
			CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS02_PIN);
			break;
		case TIMERS_U8_8_PRESCALER:
			CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS00_PIN);
     c56:	a3 e5       	ldi	r26, 0x53	; 83
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e3 e5       	ldi	r30, 0x53	; 83
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	8c 93       	st	X, r24
			SET_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS01_PIN);
     c64:	a3 e5       	ldi	r26, 0x53	; 83
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e3 e5       	ldi	r30, 0x53	; 83
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	8c 93       	st	X, r24
			CLR_BIT(TIMERS_U8_TCCR0_REG,TIMERS_U8_CS02_PIN);
     c72:	a3 e5       	ldi	r26, 0x53	; 83
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e3 e5       	ldi	r30, 0x53	; 83
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8b 7f       	andi	r24, 0xFB	; 251
     c7e:	8c 93       	st	X, r24
		}
		break;
	default : L_enumFunctionState = RET_NOK;
		break;
	}
	return L_enumFunctionState;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
}
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <TIMERS_voidTimer0SetCompareMatchValue>:



void TIMERS_voidTimer0SetCompareMatchValue(u8 copy_u8OCR0Value)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_U8_OCR0_REG = copy_u8OCR0Value;
     c96:	ec e5       	ldi	r30, 0x5C	; 92
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	80 83       	st	Z, r24
}
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <TIMERS_voidTimerDelay_ms>:



void TIMERS_voidTimerDelay_ms(u16 copy_u16DelayTimeIn_ms)
{
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	28 97       	sbiw	r28, 0x08	; 8
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	98 87       	std	Y+8, r25	; 0x08
     cc0:	8f 83       	std	Y+7, r24	; 0x07
	u16 L_u16OverFlowCounter = 0;
     cc2:	1e 82       	std	Y+6, r1	; 0x06
     cc4:	1d 82       	std	Y+5, r1	; 0x05
	f32 L_u16NoOfOVF = 0;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bc 83       	std	Y+4, r27	; 0x04

	L_u16NoOfOVF = copy_u16DelayTimeIn_ms * 3.90625; // copy_u16DelayTimeIn_ms (msec)/ (time of OVF) => 2^n * tick time
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	cc 01       	movw	r24, r24
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a e7       	ldi	r20, 0x7A	; 122
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	ab 83       	std	Y+3, r26	; 0x03
     d06:	bc 83       	std	Y+4, r27	; 0x04

	TIMERS_Error_State_tTimer0Init();
     d08:	0e 94 0b 06 	call	0xc16	; 0xc16 <TIMERS_Error_State_tTimer0Init>
	TIMERS_U8_TCNT0_REG = 256 * (1 - (L_u16NoOfOVF - (u32) L_u16NoOfOVF));
     d0c:	02 e5       	ldi	r16, 0x52	; 82
     d0e:	10 e0       	ldi	r17, 0x00	; 0
     d10:	69 81       	ldd	r22, Y+1	; 0x01
     d12:	7a 81       	ldd	r23, Y+2	; 0x02
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	cc 01       	movw	r24, r24
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	69 81       	ldd	r22, Y+1	; 0x01
     d34:	7a 81       	ldd	r23, Y+2	; 0x02
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9c 01       	movw	r18, r24
     d44:	ad 01       	movw	r20, r26
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	53 e4       	ldi	r21, 0x43	; 67
     d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	f8 01       	movw	r30, r16
     d78:	80 83       	st	Z, r24
     d7a:	15 c0       	rjmp	.+42     	; 0xda6 <TIMERS_voidTimerDelay_ms+0x100>
	while(L_u16OverFlowCounter < (u32)L_u16NoOfOVF)
	{
		while(GET_BIT(TIMERS_U8_TIFR_REG,TIMERS_U8_TOV0_PIN) == 0);
     d7c:	e8 e5       	ldi	r30, 0x58	; 88
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b9 f3       	breq	.-18     	; 0xd7c <TIMERS_voidTimerDelay_ms+0xd6>
		SET_BIT(TIMERS_U8_TIFR_REG,TIMERS_U8_TOV0_PIN); // to clear the OVF flag by software
     d8e:	a8 e5       	ldi	r26, 0x58	; 88
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e8 e5       	ldi	r30, 0x58	; 88
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	8c 93       	st	X, r24
		L_u16OverFlowCounter++;
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05

	L_u16NoOfOVF = copy_u16DelayTimeIn_ms * 3.90625; // copy_u16DelayTimeIn_ms (msec)/ (time of OVF) => 2^n * tick time

	TIMERS_Error_State_tTimer0Init();
	TIMERS_U8_TCNT0_REG = 256 * (1 - (L_u16NoOfOVF - (u32) L_u16NoOfOVF));
	while(L_u16OverFlowCounter < (u32)L_u16NoOfOVF)
     da6:	69 81       	ldd	r22, Y+1	; 0x01
     da8:	7a 81       	ldd	r23, Y+2	; 0x02
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9c 01       	movw	r18, r24
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	e8 f2       	brcs	.-70     	; 0xd7c <TIMERS_voidTimerDelay_ms+0xd6>
	{
		while(GET_BIT(TIMERS_U8_TIFR_REG,TIMERS_U8_TOV0_PIN) == 0);
		SET_BIT(TIMERS_U8_TIFR_REG,TIMERS_U8_TOV0_PIN); // to clear the OVF flag by software
		L_u16OverFlowCounter++;
	}
	L_u16OverFlowCounter = 0;
     dc2:	1e 82       	std	Y+6, r1	; 0x06
     dc4:	1d 82       	std	Y+5, r1	; 0x05
}
     dc6:	28 96       	adiw	r28, 0x08	; 8
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <TIMERS_Error_State_tSetCallBack>:

Error_State_t TIMERS_Error_State_tSetCallBack(void (*copy_pf)(void),u8 copy_u8TimersINTRPTIndex)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <TIMERS_Error_State_tSetCallBack+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <TIMERS_Error_State_tSetCallBack+0x8>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <TIMERS_Error_State_tSetCallBack+0xa>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9b 83       	std	Y+3, r25	; 0x03
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	6c 83       	std	Y+4, r22	; 0x04
	Error_State_t  L_enumFunctionState = RET_OK;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != copy_pf)
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	01 f1       	breq	.+64     	; 0xe3c <TIMERS_Error_State_tSetCallBack+0x60>
	{
		switch(copy_u8TimersINTRPTIndex)
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3e 83       	std	Y+6, r19	; 0x06
     e04:	2d 83       	std	Y+5, r18	; 0x05
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	8b 30       	cpi	r24, 0x0B	; 11
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <TIMERS_Error_State_tSetCallBack+0x40>
     e10:	2d 81       	ldd	r18, Y+5	; 0x05
     e12:	3e 81       	ldd	r19, Y+6	; 0x06
     e14:	2c 30       	cpi	r18, 0x0C	; 12
     e16:	31 05       	cpc	r19, r1
     e18:	41 f0       	breq	.+16     	; 0xe2a <TIMERS_Error_State_tSetCallBack+0x4e>
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <TIMERS_Error_State_tSetCallBack+0x5c>
		{
		case TIMERS_U8_CMP_MTH_INTRPT:
			TIMERS_APTimer0_OVF_CTC[TIMERS_U8_CMP_MTH_INTRPT_ENB_PIN] = copy_pf;
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	9b 81       	ldd	r25, Y+3	; 0x03
     e20:	90 93 6b 01 	sts	0x016B, r25
     e24:	80 93 6a 01 	sts	0x016A, r24
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <TIMERS_Error_State_tSetCallBack+0x62>
			break;
		case TIMERS_U8_OVF_INTRPT:
			TIMERS_APTimer0_OVF_CTC[TIMERS_U8_OVF_INTRPT_ENB_PIN] = copy_pf;
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	90 93 69 01 	sts	0x0169, r25
     e32:	80 93 68 01 	sts	0x0168, r24
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <TIMERS_Error_State_tSetCallBack+0x62>
			break;
		default: L_enumFunctionState = RET_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <TIMERS_Error_State_tSetCallBack+0x62>
		}
	}
	else
	{
		L_enumFunctionState = RET_NOK;
     e3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e40:	26 96       	adiw	r28, 0x06	; 6
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__vector_10>:


/*prototype for ISR of TIMER0 CTC*/
void __vector_10(void)	__attribute__((signal));
void __vector_10(void)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	static u16 L_u16CounterCTC = 0;
	L_u16CounterCTC++;
     e7c:	80 91 6c 01 	lds	r24, 0x016C
     e80:	90 91 6d 01 	lds	r25, 0x016D
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	90 93 6d 01 	sts	0x016D, r25
     e8a:	80 93 6c 01 	sts	0x016C, r24
	if(L_u16CounterCTC == TIMERS_U8_CTC_NO_OF_OVF)
     e8e:	80 91 6c 01 	lds	r24, 0x016C
     e92:	90 91 6d 01 	lds	r25, 0x016D
     e96:	27 e2       	ldi	r18, 0x27	; 39
     e98:	80 31       	cpi	r24, 0x10	; 16
     e9a:	92 07       	cpc	r25, r18
     e9c:	79 f4       	brne	.+30     	; 0xebc <__vector_10+0x6a>
	{
		/*clear counter*/
		L_u16CounterCTC = 0;
     e9e:	10 92 6d 01 	sts	0x016D, r1
     ea2:	10 92 6c 01 	sts	0x016C, r1
		/*call callback function*/
		if(TIMERS_APTimer0_OVF_CTC[TIMERS_U8_CMP_MTH_INTRPT_ENB_PIN] != NULL)
     ea6:	80 91 6a 01 	lds	r24, 0x016A
     eaa:	90 91 6b 01 	lds	r25, 0x016B
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	29 f0       	breq	.+10     	; 0xebc <__vector_10+0x6a>
		{
			TIMERS_APTimer0_OVF_CTC[TIMERS_U8_CMP_MTH_INTRPT_ENB_PIN]();
     eb2:	e0 91 6a 01 	lds	r30, 0x016A
     eb6:	f0 91 6b 01 	lds	r31, 0x016B
     eba:	09 95       	icall
		}else{}
	}else{}
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_11>:

/*prototype for ISR of TIMER0 OVF*/
void __vector_11(void)	__attribute__((signal));
void __vector_11(void)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	static u16 L_u16CounterOVF = 0;
	L_u16CounterOVF++;
     f0c:	80 91 6e 01 	lds	r24, 0x016E
     f10:	90 91 6f 01 	lds	r25, 0x016F
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	90 93 6f 01 	sts	0x016F, r25
     f1a:	80 93 6e 01 	sts	0x016E, r24
	if(L_u16CounterOVF == TIMERS_U8_NORMAL_NO_OF_OVF)
     f1e:	80 91 6e 01 	lds	r24, 0x016E
     f22:	90 91 6f 01 	lds	r25, 0x016F
     f26:	2c e4       	ldi	r18, 0x4C	; 76
     f28:	8b 34       	cpi	r24, 0x4B	; 75
     f2a:	92 07       	cpc	r25, r18
     f2c:	99 f4       	brne	.+38     	; 0xf54 <__vector_11+0x72>
	{
		/*update preload value*/
		TIMERS_U8_TCNT0_REG = TIMERS_U8_PRELOAD_INITIAL_VALUE;
     f2e:	e2 e5       	ldi	r30, 0x52	; 82
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 ec       	ldi	r24, 0xC0	; 192
     f34:	80 83       	st	Z, r24
		/*clear the OVF counter*/
		L_u16CounterOVF = 0;
     f36:	10 92 6f 01 	sts	0x016F, r1
     f3a:	10 92 6e 01 	sts	0x016E, r1
		/*call APP function*/
		if(TIMERS_APTimer0_OVF_CTC[TIMERS_U8_OVF_INTRPT_ENB_PIN] != NULL)
     f3e:	80 91 68 01 	lds	r24, 0x0168
     f42:	90 91 69 01 	lds	r25, 0x0169
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	29 f0       	breq	.+10     	; 0xf54 <__vector_11+0x72>
		{
			TIMERS_APTimer0_OVF_CTC[TIMERS_U8_OVF_INTRPT_ENB_PIN]();
     f4a:	e0 91 68 01 	lds	r30, 0x0168
     f4e:	f0 91 69 01 	lds	r31, 0x0169
     f52:	09 95       	icall
		}else{}
	}else{}
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <GIE_voidEnable>:
#include "GIE_private.h"
#include "GIE_config.h"


void GIE_voidEnable(void)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIE_U8_SREG_REG,GIE_U8_SREG_BIT);
     f82:	af e5       	ldi	r26, 0x5F	; 95
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ef e5       	ldi	r30, 0x5F	; 95
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 68       	ori	r24, 0x80	; 128
     f8e:	8c 93       	st	X, r24
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GIE_U8_SREG_REG,GIE_U8_SREG_BIT);
     f9e:	af e5       	ldi	r26, 0x5F	; 95
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ef e5       	ldi	r30, 0x5F	; 95
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	8c 93       	st	X, r24
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <EXTI_Error_StateEnable>:

/*Global Pointer to a function*/
static void (*EXTI_APFEXTI[3])(void) = {NULL,NULL,NULL};

Error_State_t EXTI_Error_StateEnable(u8 copy_u8EXTIIndex,u8 copy_u8EdgeIndex)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2b 97       	sbiw	r28, 0x0b	; 11
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t L_enumFunctionState = RET_OK;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIIndex)
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3b 87       	std	Y+11, r19	; 0x0b
     fd6:	2a 87       	std	Y+10, r18	; 0x0a
     fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fda:	9b 85       	ldd	r25, Y+11	; 0x0b
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <EXTI_Error_StateEnable+0x32>
     fe2:	85 c0       	rjmp	.+266    	; 0x10ee <EXTI_Error_StateEnable+0x13c>
     fe4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <EXTI_Error_StateEnable+0x3e>
     fee:	f9 c0       	rjmp	.+498    	; 0x11e2 <EXTI_Error_StateEnable+0x230>
     ff0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	09 f0       	breq	.+2      	; 0xffa <EXTI_Error_StateEnable+0x48>
     ff8:	2a c1       	rjmp	.+596    	; 0x124e <EXTI_Error_StateEnable+0x29c>
	{
		case EXTI_U8_INT0:
			switch(copy_u8EdgeIndex)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	39 87       	std	Y+9, r19	; 0x09
    1002:	28 87       	std	Y+8, r18	; 0x08
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	99 85       	ldd	r25, Y+9	; 0x09
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	61 f1       	breq	.+88     	; 0x1066 <EXTI_Error_StateEnable+0xb4>
    100e:	28 85       	ldd	r18, Y+8	; 0x08
    1010:	39 85       	ldd	r19, Y+9	; 0x09
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <EXTI_Error_StateEnable+0x70>
    1018:	88 85       	ldd	r24, Y+8	; 0x08
    101a:	99 85       	ldd	r25, Y+9	; 0x09
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f0       	breq	.+26     	; 0x103a <EXTI_Error_StateEnable+0x88>
    1020:	64 c0       	rjmp	.+200    	; 0x10ea <EXTI_Error_StateEnable+0x138>
    1022:	28 85       	ldd	r18, Y+8	; 0x08
    1024:	39 85       	ldd	r19, Y+9	; 0x09
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	99 f1       	breq	.+102    	; 0x1092 <EXTI_Error_StateEnable+0xe0>
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <EXTI_Error_StateEnable+0x86>
    1036:	43 c0       	rjmp	.+134    	; 0x10be <EXTI_Error_StateEnable+0x10c>
    1038:	58 c0       	rjmp	.+176    	; 0x10ea <EXTI_Error_StateEnable+0x138>
			{
				case EXTI_U8_RAISING_EDGE:
				SET_BIT(EXTI_U8_MCUCR_REG,ISC00_BIT);
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_MCUCR_REG,ISC01_BIT);
    1048:	a5 e5       	ldi	r26, 0x55	; 85
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e5       	ldi	r30, 0x55	; 85
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT0_BIT);
    1056:	ab e5       	ldi	r26, 0x5B	; 91
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	eb e5       	ldi	r30, 0x5B	; 91
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 64       	ori	r24, 0x40	; 64
    1062:	8c 93       	st	X, r24
    1064:	f5 c0       	rjmp	.+490    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_FALLING_EDGE:
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC00_BIT);
    1066:	a5 e5       	ldi	r26, 0x55	; 85
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e5       	ldi	r30, 0x55	; 85
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_MCUCR_REG,ISC01_BIT);
    1074:	a5 e5       	ldi	r26, 0x55	; 85
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e5       	ldi	r30, 0x55	; 85
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT0_BIT);
    1082:	ab e5       	ldi	r26, 0x5B	; 91
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e5       	ldi	r30, 0x5B	; 91
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	8c 93       	st	X, r24
    1090:	df c0       	rjmp	.+446    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_ANY_LOGICAL_CHANGE:
				SET_BIT(EXTI_U8_MCUCR_REG,ISC00_BIT);
    1092:	a5 e5       	ldi	r26, 0x55	; 85
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e5       	ldi	r30, 0x55	; 85
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	8c 93       	st	X, r24
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC01_BIT);
    10a0:	a5 e5       	ldi	r26, 0x55	; 85
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e5       	ldi	r30, 0x55	; 85
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 7f       	andi	r24, 0xFD	; 253
    10ac:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT0_BIT);
    10ae:	ab e5       	ldi	r26, 0x5B	; 91
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	eb e5       	ldi	r30, 0x5B	; 91
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	8c 93       	st	X, r24
    10bc:	c9 c0       	rjmp	.+402    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_LOW_LEVEL:
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC00_BIT);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	8c 93       	st	X, r24
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC01_BIT);
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8d 7f       	andi	r24, 0xFD	; 253
    10d8:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT0_BIT);
    10da:	ab e5       	ldi	r26, 0x5B	; 91
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	eb e5       	ldi	r30, 0x5B	; 91
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	8c 93       	st	X, r24
    10e8:	b3 c0       	rjmp	.+358    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				default : L_enumFunctionState = RET_NOK;
    10ea:	19 82       	std	Y+1, r1	; 0x01
    10ec:	b1 c0       	rjmp	.+354    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
			}
		break;
		case EXTI_U8_INT1:
			switch(copy_u8EdgeIndex)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3f 83       	std	Y+7, r19	; 0x07
    10f6:	2e 83       	std	Y+6, r18	; 0x06
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	61 f1       	breq	.+88     	; 0x115a <EXTI_Error_StateEnable+0x1a8>
    1102:	2e 81       	ldd	r18, Y+6	; 0x06
    1104:	3f 81       	ldd	r19, Y+7	; 0x07
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	2c f4       	brge	.+10     	; 0x1116 <EXTI_Error_StateEnable+0x164>
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f0       	breq	.+26     	; 0x112e <EXTI_Error_StateEnable+0x17c>
    1114:	64 c0       	rjmp	.+200    	; 0x11de <EXTI_Error_StateEnable+0x22c>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	99 f1       	breq	.+102    	; 0x1186 <EXTI_Error_StateEnable+0x1d4>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <EXTI_Error_StateEnable+0x17a>
    112a:	43 c0       	rjmp	.+134    	; 0x11b2 <EXTI_Error_StateEnable+0x200>
    112c:	58 c0       	rjmp	.+176    	; 0x11de <EXTI_Error_StateEnable+0x22c>
			{
				case EXTI_U8_RAISING_EDGE:
				SET_BIT(EXTI_U8_MCUCR_REG,ISC10_BIT);
    112e:	a5 e5       	ldi	r26, 0x55	; 85
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e5       	ldi	r30, 0x55	; 85
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	84 60       	ori	r24, 0x04	; 4
    113a:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_MCUCR_REG,ISC11_BIT);
    113c:	a5 e5       	ldi	r26, 0x55	; 85
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e5       	ldi	r30, 0x55	; 85
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	88 60       	ori	r24, 0x08	; 8
    1148:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    114a:	ab e5       	ldi	r26, 0x5B	; 91
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e5       	ldi	r30, 0x5B	; 91
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 68       	ori	r24, 0x80	; 128
    1156:	8c 93       	st	X, r24
    1158:	7b c0       	rjmp	.+246    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_FALLING_EDGE:
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC10_BIT);
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8b 7f       	andi	r24, 0xFB	; 251
    1166:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_MCUCR_REG,ISC11_BIT);
    1168:	a5 e5       	ldi	r26, 0x55	; 85
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e5       	ldi	r30, 0x55	; 85
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    1176:	ab e5       	ldi	r26, 0x5B	; 91
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e5       	ldi	r30, 0x5B	; 91
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	8c 93       	st	X, r24
    1184:	65 c0       	rjmp	.+202    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_ANY_LOGICAL_CHANGE:
				SET_BIT(EXTI_U8_MCUCR_REG,ISC10_BIT);
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	84 60       	ori	r24, 0x04	; 4
    1192:	8c 93       	st	X, r24
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC11_BIT);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    11a2:	ab e5       	ldi	r26, 0x5B	; 91
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e5       	ldi	r30, 0x5B	; 91
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	8c 93       	st	X, r24
    11b0:	4f c0       	rjmp	.+158    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_LOW_LEVEL:
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC10_BIT);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8b 7f       	andi	r24, 0xFB	; 251
    11be:	8c 93       	st	X, r24
				CLR_BIT(EXTI_U8_MCUCR_REG,ISC11_BIT);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    11ce:	ab e5       	ldi	r26, 0x5B	; 91
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e5       	ldi	r30, 0x5B	; 91
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	8c 93       	st	X, r24
    11dc:	39 c0       	rjmp	.+114    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				default : L_enumFunctionState = RET_NOK;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	37 c0       	rjmp	.+110    	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
			}
		break;		
		case EXTI_U8_INT2:
			switch(copy_u8EdgeIndex)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3d 83       	std	Y+5, r19	; 0x05
    11ea:	2c 83       	std	Y+4, r18	; 0x04
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	31 f0       	breq	.+12     	; 0x1200 <EXTI_Error_StateEnable+0x24e>
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	21 30       	cpi	r18, 0x01	; 1
    11fa:	31 05       	cpc	r19, r1
    11fc:	b9 f0       	breq	.+46     	; 0x122c <EXTI_Error_StateEnable+0x27a>
    11fe:	25 c0       	rjmp	.+74     	; 0x124a <EXTI_Error_StateEnable+0x298>
			{
				case EXTI_U8_RAISING_EDGE:
				SET_BIT(EXTI_U8_MCUCR_REG,ISC10_BIT);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	84 60       	ori	r24, 0x04	; 4
    120c:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_MCUCR_REG,ISC11_BIT);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	88 60       	ori	r24, 0x08	; 8
    121a:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    121c:	ab e5       	ldi	r26, 0x5B	; 91
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e5       	ldi	r30, 0x5B	; 91
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	8c 93       	st	X, r24
    122a:	12 c0       	rjmp	.+36     	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				case EXTI_U8_FALLING_EDGE:
				CLR_BIT(EXTI_U8_MCUCSR_REG,ISC2_BIT);
    122c:	a4 e5       	ldi	r26, 0x54	; 84
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e4 e5       	ldi	r30, 0x54	; 84
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7b       	andi	r24, 0xBF	; 191
    1238:	8c 93       	st	X, r24
				SET_BIT(EXTI_U8_GICR_REG,INT2_BIT);
    123a:	ab e5       	ldi	r26, 0x5B	; 91
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e5       	ldi	r30, 0x5B	; 91
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	8c 93       	st	X, r24
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
				default : L_enumFunctionState = RET_NOK;
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <EXTI_Error_StateEnable+0x29e>
				break;
			}
		break;	
		default : L_enumFunctionState = RET_NOK;
    124e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return L_enumFunctionState;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
}
    1252:	2b 96       	adiw	r28, 0x0b	; 11
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <EXTI_Error_StateDisable>:

Error_State_t EXTI_Error_StateDisable(u8 copy_u8EXTIIndex)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <EXTI_Error_StateDisable+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <EXTI_Error_StateDisable+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
	Error_State_t L_enumFunctionState = RET_OK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIIndex) 
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3c 83       	std	Y+4, r19	; 0x04
    127e:	2b 83       	std	Y+3, r18	; 0x03
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	89 f0       	breq	.+34     	; 0x12ac <EXTI_Error_StateDisable+0x48>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	a1 f0       	breq	.+40     	; 0x12bc <EXTI_Error_StateDisable+0x58>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	c1 f4       	brne	.+48     	; 0x12cc <EXTI_Error_StateDisable+0x68>
	{
		case EXTI_U8_INT0:
		CLR_BIT(EXTI_U8_GICR_REG,INT0_BIT);
    129c:	ab e5       	ldi	r26, 0x5B	; 91
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e5       	ldi	r30, 0x5B	; 91
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7b       	andi	r24, 0xBF	; 191
    12a8:	8c 93       	st	X, r24
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <EXTI_Error_StateDisable+0x6a>
		break;
		case EXTI_U8_INT1:
		CLR_BIT(EXTI_U8_GICR_REG,INT1_BIT);
    12ac:	ab e5       	ldi	r26, 0x5B	; 91
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	eb e5       	ldi	r30, 0x5B	; 91
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 77       	andi	r24, 0x7F	; 127
    12b8:	8c 93       	st	X, r24
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <EXTI_Error_StateDisable+0x6a>
		break;
		case EXTI_U8_INT2:
		CLR_BIT(EXTI_U8_GICR_REG,INT2_BIT);
    12bc:	ab e5       	ldi	r26, 0x5B	; 91
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	eb e5       	ldi	r30, 0x5B	; 91
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	8c 93       	st	X, r24
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <EXTI_Error_StateDisable+0x6a>
		break;
		default : L_enumFunctionState = RET_NOK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
		break;
	} 
	return L_enumFunctionState;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <EXTI_Error_State_tEXTICallBack>:


Error_State_t EXTI_Error_State_tEXTICallBack(void (*copy_PF)(void),u8 copy_u8EXTIIndex)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <EXTI_Error_State_tEXTICallBack+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <EXTI_Error_State_tEXTICallBack+0x8>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	9b 83       	std	Y+3, r25	; 0x03
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6c 83       	std	Y+4, r22	; 0x04
	Error_State_t L_enumFunctionState = RET_OK;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
	if((copy_PF != NULL) && (copy_u8EXTIIndex<=EXTI_U8_INT2))
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	81 f0       	breq	.+32     	; 0x131c <EXTI_Error_State_tEXTICallBack+0x3e>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	68 f4       	brcc	.+26     	; 0x131c <EXTI_Error_State_tEXTICallBack+0x3e>
	{
		EXTI_APFEXTI[copy_u8EXTIIndex] = copy_PF;
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	fc 01       	movw	r30, r24
    130e:	e0 59       	subi	r30, 0x90	; 144
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	01 c0       	rjmp	.+2      	; 0x131e <EXTI_Error_State_tEXTICallBack+0x40>
	}
	else
	{
		L_enumFunctionState = RET_NOK;
    131c:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <__vector_1>:


/*prototype for ISR of EXTI0*/
void __vector_1(void)	__attribute__((signal));
void __vector_1(void)
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFEXTI[EXTI_U8_INT0] != NULL)
    1358:	80 91 70 01 	lds	r24, 0x0170
    135c:	90 91 71 01 	lds	r25, 0x0171
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	29 f0       	breq	.+10     	; 0x136e <__vector_1+0x40>
	{
		EXTI_APFEXTI[EXTI_U8_INT0]();
    1364:	e0 91 70 01 	lds	r30, 0x0170
    1368:	f0 91 71 01 	lds	r31, 0x0171
    136c:	09 95       	icall
	}
}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_2>:

/*prototype for ISR of EXTI1*/
void __vector_2(void)	__attribute__((signal));
void __vector_2(void)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFEXTI[EXTI_U8_INT1] != NULL)
    13be:	80 91 72 01 	lds	r24, 0x0172
    13c2:	90 91 73 01 	lds	r25, 0x0173
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	29 f0       	breq	.+10     	; 0x13d4 <__vector_2+0x40>
	{
		EXTI_APFEXTI[EXTI_U8_INT1]();
    13ca:	e0 91 72 01 	lds	r30, 0x0172
    13ce:	f0 91 73 01 	lds	r31, 0x0173
    13d2:	09 95       	icall
	}
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_3>:

/*prototype for ISR of EXTI2*/
void __vector_3(void)	__attribute__((signal));
void __vector_3(void)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_APFEXTI[EXTI_U8_INT2] != NULL)
    1424:	80 91 74 01 	lds	r24, 0x0174
    1428:	90 91 75 01 	lds	r25, 0x0175
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	29 f0       	breq	.+10     	; 0x143a <__vector_3+0x40>
	{
		EXTI_APFEXTI[EXTI_U8_INT2]();
    1430:	e0 91 74 01 	lds	r30, 0x0174
    1434:	f0 91 75 01 	lds	r31, 0x0175
    1438:	09 95       	icall
	}
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <DIO_voidInit>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
void DIO_voidInit(void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
/****************************************************************************************************************************************************/
	DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    1468:	ea e3       	ldi	r30, 0x3A	; 58
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	80 83       	st	Z, r24
						   DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
						   
	DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    1470:	e7 e3       	ldi	r30, 0x37	; 55
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
						   DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);
						   
	DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	80 83       	st	Z, r24
						   DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);
						   
	DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    1480:	e1 e3       	ldi	r30, 0x31	; 49
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	83 ef       	ldi	r24, 0xF3	; 243
    1486:	80 83       	st	Z, r24
						   DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);
/****************************************************************************************************************************************************/	   
	DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    1488:	eb e3       	ldi	r30, 0x3B	; 59
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
						   DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);
						   
	DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	10 82       	st	Z, r1
						   DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);
						   
	DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
						   DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);
						   
	DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    149a:	e2 e3       	ldi	r30, 0x32	; 50
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	10 82       	st	Z, r1
						   DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <DIO_Error_State_tSetPinDirection>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tSetPinDirection(u8 copy_u8portId, u8 copy_u8pinId,u8 copy_u8pinDirection)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	2e 97       	sbiw	r28, 0x0e	; 14
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	6b 83       	std	Y+3, r22	; 0x03
    14be:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t L_enumFunctionState = RET_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8portId <= DIO_U8_PORTD) && (copy_u8pinId<=DIO_U8_PIN7) && ((copy_u8pinDirection==DIO_U8_OUTPUT) || (copy_u8pinDirection==DIO_U8_INPUT)))
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_Error_State_tSetPinDirection+0x26>
    14ca:	0c c1       	rjmp	.+536    	; 0x16e4 <DIO_Error_State_tSetPinDirection+0x23e>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <DIO_Error_State_tSetPinDirection+0x2e>
    14d2:	08 c1       	rjmp	.+528    	; 0x16e4 <DIO_Error_State_tSetPinDirection+0x23e>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <DIO_Error_State_tSetPinDirection+0x3c>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	88 23       	and	r24, r24
    14de:	09 f0       	breq	.+2      	; 0x14e2 <DIO_Error_State_tSetPinDirection+0x3c>
    14e0:	01 c1       	rjmp	.+514    	; 0x16e4 <DIO_Error_State_tSetPinDirection+0x23e>
	{
		switch (copy_u8portId)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3e 87       	std	Y+14, r19	; 0x0e
    14ea:	2d 87       	std	Y+13, r18	; 0x0d
    14ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <DIO_Error_State_tSetPinDirection+0x52>
    14f6:	4f c0       	rjmp	.+158    	; 0x1596 <DIO_Error_State_tSetPinDirection+0xf0>
    14f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	2c f4       	brge	.+10     	; 0x150c <DIO_Error_State_tSetPinDirection+0x66>
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	71 f0       	breq	.+28     	; 0x1526 <DIO_Error_State_tSetPinDirection+0x80>
    150a:	ed c0       	rjmp	.+474    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
    150c:	2d 85       	ldd	r18, Y+13	; 0x0d
    150e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <DIO_Error_State_tSetPinDirection+0x72>
    1516:	77 c0       	rjmp	.+238    	; 0x1606 <DIO_Error_State_tSetPinDirection+0x160>
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <DIO_Error_State_tSetPinDirection+0x7e>
    1522:	a9 c0       	rjmp	.+338    	; 0x1676 <DIO_Error_State_tSetPinDirection+0x1d0>
    1524:	e0 c0       	rjmp	.+448    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
		{
			case DIO_U8_PORTA:
				switch (copy_u8pinDirection)
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3c 87       	std	Y+12, r19	; 0x0c
    152e:	2b 87       	std	Y+11, r18	; 0x0b
    1530:	8b 85       	ldd	r24, Y+11	; 0x0b
    1532:	9c 85       	ldd	r25, Y+12	; 0x0c
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	d1 f0       	breq	.+52     	; 0x156c <DIO_Error_State_tSetPinDirection+0xc6>
    1538:	2b 85       	ldd	r18, Y+11	; 0x0b
    153a:	3c 85       	ldd	r19, Y+12	; 0x0c
    153c:	21 30       	cpi	r18, 0x01	; 1
    153e:	31 05       	cpc	r19, r1
    1540:	09 f0       	breq	.+2      	; 0x1544 <DIO_Error_State_tSetPinDirection+0x9e>
    1542:	d1 c0       	rjmp	.+418    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				{
					case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,copy_u8pinId);break;
    1544:	aa e3       	ldi	r26, 0x3A	; 58
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ea e3       	ldi	r30, 0x3A	; 58
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_Error_State_tSetPinDirection+0xbc>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_Error_State_tSetPinDirection+0xb8>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	bd c0       	rjmp	.+378    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
					case DIO_U8_INPUT :CLR_BIT(DIO_U8_DDRA_REG,copy_u8pinId);break;
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_Error_State_tSetPinDirection+0xe4>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_Error_State_tSetPinDirection+0xe0>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	a8 c0       	rjmp	.+336    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				}
			break;
			case DIO_U8_PORTB:
				switch (copy_u8pinDirection)
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3a 87       	std	Y+10, r19	; 0x0a
    159e:	29 87       	std	Y+9, r18	; 0x09
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	d1 f0       	breq	.+52     	; 0x15dc <DIO_Error_State_tSetPinDirection+0x136>
    15a8:	29 85       	ldd	r18, Y+9	; 0x09
    15aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ac:	21 30       	cpi	r18, 0x01	; 1
    15ae:	31 05       	cpc	r19, r1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <DIO_Error_State_tSetPinDirection+0x10e>
    15b2:	99 c0       	rjmp	.+306    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				{
					case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,copy_u8pinId);break;
    15b4:	a7 e3       	ldi	r26, 0x37	; 55
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_Error_State_tSetPinDirection+0x12c>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_Error_State_tSetPinDirection+0x128>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	85 c0       	rjmp	.+266    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
					case DIO_U8_INPUT :CLR_BIT(DIO_U8_DDRB_REG,copy_u8pinId);break;
    15dc:	a7 e3       	ldi	r26, 0x37	; 55
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e7 e3       	ldi	r30, 0x37	; 55
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_Error_State_tSetPinDirection+0x154>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_Error_State_tSetPinDirection+0x150>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	70 c0       	rjmp	.+224    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				}
			break;
			case DIO_U8_PORTC:
				switch (copy_u8pinDirection)
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	38 87       	std	Y+8, r19	; 0x08
    160e:	2f 83       	std	Y+7, r18	; 0x07
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	d1 f0       	breq	.+52     	; 0x164c <DIO_Error_State_tSetPinDirection+0x1a6>
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	38 85       	ldd	r19, Y+8	; 0x08
    161c:	21 30       	cpi	r18, 0x01	; 1
    161e:	31 05       	cpc	r19, r1
    1620:	09 f0       	breq	.+2      	; 0x1624 <DIO_Error_State_tSetPinDirection+0x17e>
    1622:	61 c0       	rjmp	.+194    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				{
					case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,copy_u8pinId);break;
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e4 e3       	ldi	r30, 0x34	; 52
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_Error_State_tSetPinDirection+0x19c>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_Error_State_tSetPinDirection+0x198>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	4d c0       	rjmp	.+154    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
					case DIO_U8_INPUT :CLR_BIT(DIO_U8_DDRC_REG,copy_u8pinId);break;
    164c:	a4 e3       	ldi	r26, 0x34	; 52
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e4 e3       	ldi	r30, 0x34	; 52
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_Error_State_tSetPinDirection+0x1c4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_Error_State_tSetPinDirection+0x1c0>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	38 c0       	rjmp	.+112    	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				}
			break;
			case DIO_U8_PORTD:
				switch (copy_u8pinDirection)
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	2d 83       	std	Y+5, r18	; 0x05
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	c9 f0       	breq	.+50     	; 0x16ba <DIO_Error_State_tSetPinDirection+0x214>
    1688:	2d 81       	ldd	r18, Y+5	; 0x05
    168a:	3e 81       	ldd	r19, Y+6	; 0x06
    168c:	21 30       	cpi	r18, 0x01	; 1
    168e:	31 05       	cpc	r19, r1
    1690:	51 f5       	brne	.+84     	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
				{
					case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,copy_u8pinId);break;
    1692:	a1 e3       	ldi	r26, 0x31	; 49
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e1 e3       	ldi	r30, 0x31	; 49
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_Error_State_tSetPinDirection+0x20a>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_Error_State_tSetPinDirection+0x206>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	16 c0       	rjmp	.+44     	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
					case DIO_U8_INPUT :CLR_BIT(DIO_U8_DDRD_REG,copy_u8pinId);break;
    16ba:	a1 e3       	ldi	r26, 0x31	; 49
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_Error_State_tSetPinDirection+0x232>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_Error_State_tSetPinDirection+0x22e>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <DIO_Error_State_tSetPinDirection+0x240>
			break;
		}
	}
	else
	{
		L_enumFunctionState = RET_NOK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    16e8:	2e 96       	adiw	r28, 0x0e	; 14
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <DIO_Error_State_tSetPinValue>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tSetPinValue(u8 copy_u8portId, u8 copy_u8pinId,u8 copy_u8pinValue)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	2e 97       	sbiw	r28, 0x0e	; 14
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	6b 83       	std	Y+3, r22	; 0x03
    1712:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t L_enumFunctionState = RET_OK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8pinId<=DIO_U8_PIN7)
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 30       	cpi	r24, 0x08	; 8
    171c:	08 f0       	brcs	.+2      	; 0x1720 <DIO_Error_State_tSetPinValue+0x26>
    171e:	08 c1       	rjmp	.+528    	; 0x1930 <DIO_Error_State_tSetPinValue+0x236>
	{
		switch (copy_u8portId)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3e 87       	std	Y+14, r19	; 0x0e
    1728:	2d 87       	std	Y+13, r18	; 0x0d
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <DIO_Error_State_tSetPinValue+0x3c>
    1734:	50 c0       	rjmp	.+160    	; 0x17d6 <DIO_Error_State_tSetPinValue+0xdc>
    1736:	2d 85       	ldd	r18, Y+13	; 0x0d
    1738:	3e 85       	ldd	r19, Y+14	; 0x0e
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <DIO_Error_State_tSetPinValue+0x50>
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	71 f0       	breq	.+28     	; 0x1764 <DIO_Error_State_tSetPinValue+0x6a>
    1748:	f1 c0       	rjmp	.+482    	; 0x192c <DIO_Error_State_tSetPinValue+0x232>
    174a:	2d 85       	ldd	r18, Y+13	; 0x0d
    174c:	3e 85       	ldd	r19, Y+14	; 0x0e
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_Error_State_tSetPinValue+0x5c>
    1754:	79 c0       	rjmp	.+242    	; 0x1848 <DIO_Error_State_tSetPinValue+0x14e>
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <DIO_Error_State_tSetPinValue+0x68>
    1760:	ac c0       	rjmp	.+344    	; 0x18ba <DIO_Error_State_tSetPinValue+0x1c0>
    1762:	e4 c0       	rjmp	.+456    	; 0x192c <DIO_Error_State_tSetPinValue+0x232>
		{
			case DIO_U8_PORTA:
				switch(copy_u8pinValue)
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3c 87       	std	Y+12, r19	; 0x0c
    176c:	2b 87       	std	Y+11, r18	; 0x0b
    176e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1770:	9c 85       	ldd	r25, Y+12	; 0x0c
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	c9 f0       	breq	.+50     	; 0x17a8 <DIO_Error_State_tSetPinValue+0xae>
    1776:	2b 85       	ldd	r18, Y+11	; 0x0b
    1778:	3c 85       	ldd	r19, Y+12	; 0x0c
    177a:	21 30       	cpi	r18, 0x01	; 1
    177c:	31 05       	cpc	r19, r1
    177e:	49 f5       	brne	.+82     	; 0x17d2 <DIO_Error_State_tSetPinValue+0xd8>
				{	
					case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTA_REG,copy_u8pinId);break;
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_Error_State_tSetPinValue+0xa4>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_Error_State_tSetPinValue+0xa0>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	c5 c0       	rjmp	.+394    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					case DIO_U8_LOW : CLR_BIT(DIO_U8_PORTA_REG,copy_u8pinId);break;
    17a8:	ab e3       	ldi	r26, 0x3B	; 59
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	eb e3       	ldi	r30, 0x3B	; 59
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_Error_State_tSetPinValue+0xcc>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_Error_State_tSetPinValue+0xc8>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	b0 c0       	rjmp	.+352    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					default: L_enumFunctionState = RET_NOK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	ae c0       	rjmp	.+348    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
				}
			break;
			case DIO_U8_PORTB:
				switch(copy_u8pinValue)
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3a 87       	std	Y+10, r19	; 0x0a
    17de:	29 87       	std	Y+9, r18	; 0x09
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	c9 f0       	breq	.+50     	; 0x181a <DIO_Error_State_tSetPinValue+0x120>
    17e8:	29 85       	ldd	r18, Y+9	; 0x09
    17ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ec:	21 30       	cpi	r18, 0x01	; 1
    17ee:	31 05       	cpc	r19, r1
    17f0:	49 f5       	brne	.+82     	; 0x1844 <DIO_Error_State_tSetPinValue+0x14a>
				{
					case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTB_REG,copy_u8pinId);break;
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_Error_State_tSetPinValue+0x116>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_Error_State_tSetPinValue+0x112>
    1814:	84 2b       	or	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	8c c0       	rjmp	.+280    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					case DIO_U8_LOW : CLR_BIT(DIO_U8_PORTB_REG,copy_u8pinId);break;
    181a:	a8 e3       	ldi	r26, 0x38	; 56
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e8 e3       	ldi	r30, 0x38	; 56
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_Error_State_tSetPinValue+0x13e>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_Error_State_tSetPinValue+0x13a>
    183c:	80 95       	com	r24
    183e:	84 23       	and	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	77 c0       	rjmp	.+238    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					default: L_enumFunctionState = RET_NOK;
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	75 c0       	rjmp	.+234    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
				}
			break;
			case DIO_U8_PORTC:
				switch(copy_u8pinValue)
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	38 87       	std	Y+8, r19	; 0x08
    1850:	2f 83       	std	Y+7, r18	; 0x07
    1852:	8f 81       	ldd	r24, Y+7	; 0x07
    1854:	98 85       	ldd	r25, Y+8	; 0x08
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	c9 f0       	breq	.+50     	; 0x188c <DIO_Error_State_tSetPinValue+0x192>
    185a:	2f 81       	ldd	r18, Y+7	; 0x07
    185c:	38 85       	ldd	r19, Y+8	; 0x08
    185e:	21 30       	cpi	r18, 0x01	; 1
    1860:	31 05       	cpc	r19, r1
    1862:	49 f5       	brne	.+82     	; 0x18b6 <DIO_Error_State_tSetPinValue+0x1bc>
				{
					case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTC_REG,copy_u8pinId);break;
    1864:	a5 e3       	ldi	r26, 0x35	; 53
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e3       	ldi	r30, 0x35	; 53
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <DIO_Error_State_tSetPinValue+0x188>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <DIO_Error_State_tSetPinValue+0x184>
    1886:	84 2b       	or	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	53 c0       	rjmp	.+166    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					case DIO_U8_LOW : CLR_BIT(DIO_U8_PORTC_REG,copy_u8pinId);break;
    188c:	a5 e3       	ldi	r26, 0x35	; 53
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e3       	ldi	r30, 0x35	; 53
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_Error_State_tSetPinValue+0x1b0>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_Error_State_tSetPinValue+0x1ac>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	3e c0       	rjmp	.+124    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					default: L_enumFunctionState = RET_NOK;
    18b6:	19 82       	std	Y+1, r1	; 0x01
    18b8:	3c c0       	rjmp	.+120    	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
				}
			break;
			case DIO_U8_PORTD:
				switch(copy_u8pinValue)
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3e 83       	std	Y+6, r19	; 0x06
    18c2:	2d 83       	std	Y+5, r18	; 0x05
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	c9 f0       	breq	.+50     	; 0x18fe <DIO_Error_State_tSetPinValue+0x204>
    18cc:	2d 81       	ldd	r18, Y+5	; 0x05
    18ce:	3e 81       	ldd	r19, Y+6	; 0x06
    18d0:	21 30       	cpi	r18, 0x01	; 1
    18d2:	31 05       	cpc	r19, r1
    18d4:	49 f5       	brne	.+82     	; 0x1928 <DIO_Error_State_tSetPinValue+0x22e>
				{
					case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTD_REG,copy_u8pinId);break;
    18d6:	a2 e3       	ldi	r26, 0x32	; 50
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e2 e3       	ldi	r30, 0x32	; 50
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_Error_State_tSetPinValue+0x1fa>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_Error_State_tSetPinValue+0x1f6>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	1a c0       	rjmp	.+52     	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					case DIO_U8_LOW : CLR_BIT(DIO_U8_PORTD_REG,copy_u8pinId);break;
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_Error_State_tSetPinValue+0x222>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_Error_State_tSetPinValue+0x21e>
    1920:	80 95       	com	r24
    1922:	84 23       	and	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
					default: L_enumFunctionState = RET_NOK;
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
				}
			break;
			default:
			L_enumFunctionState = RET_NOK;
    192c:	19 82       	std	Y+1, r1	; 0x01
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <DIO_Error_State_tSetPinValue+0x238>
			break;
		}
	}
	else
	{
		L_enumFunctionState = RET_NOK;
    1930:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	2e 96       	adiw	r28, 0x0e	; 14
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DIO_Error_State_tGetPinValue>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tGetPinValue(u8 copy_u8portId, u8 copy_u8pinId,u8 *copy_u8returnedPinValue)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	27 97       	sbiw	r28, 0x07	; 7
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	6b 83       	std	Y+3, r22	; 0x03
    195e:	5d 83       	std	Y+5, r21	; 0x05
    1960:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t L_enumFunctionState = RET_OK;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8pinId<=DIO_U8_PIN7) && (NULL!=copy_u8returnedPinValue))
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	08 f0       	brcs	.+2      	; 0x196e <DIO_Error_State_tGetPinValue+0x28>
    196c:	de c0       	rjmp	.+444    	; 0x1b2a <DIO_Error_State_tGetPinValue+0x1e4>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	09 f4       	brne	.+2      	; 0x1978 <DIO_Error_State_tGetPinValue+0x32>
    1976:	d9 c0       	rjmp	.+434    	; 0x1b2a <DIO_Error_State_tGetPinValue+0x1e4>
	{
		switch (copy_u8portId)
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	3f 83       	std	Y+7, r19	; 0x07
    1980:	2e 83       	std	Y+6, r18	; 0x06
    1982:	4e 81       	ldd	r20, Y+6	; 0x06
    1984:	5f 81       	ldd	r21, Y+7	; 0x07
    1986:	41 30       	cpi	r20, 0x01	; 1
    1988:	51 05       	cpc	r21, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <DIO_Error_State_tGetPinValue+0x48>
    198c:	45 c0       	rjmp	.+138    	; 0x1a18 <DIO_Error_State_tGetPinValue+0xd2>
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	91 05       	cpc	r25, r1
    1996:	34 f4       	brge	.+12     	; 0x19a4 <DIO_Error_State_tGetPinValue+0x5e>
    1998:	2e 81       	ldd	r18, Y+6	; 0x06
    199a:	3f 81       	ldd	r19, Y+7	; 0x07
    199c:	21 15       	cp	r18, r1
    199e:	31 05       	cpc	r19, r1
    19a0:	71 f0       	breq	.+28     	; 0x19be <DIO_Error_State_tGetPinValue+0x78>
    19a2:	c1 c0       	rjmp	.+386    	; 0x1b26 <DIO_Error_State_tGetPinValue+0x1e0>
    19a4:	4e 81       	ldd	r20, Y+6	; 0x06
    19a6:	5f 81       	ldd	r21, Y+7	; 0x07
    19a8:	42 30       	cpi	r20, 0x02	; 2
    19aa:	51 05       	cpc	r21, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <DIO_Error_State_tGetPinValue+0x6a>
    19ae:	61 c0       	rjmp	.+194    	; 0x1a72 <DIO_Error_State_tGetPinValue+0x12c>
    19b0:	8e 81       	ldd	r24, Y+6	; 0x06
    19b2:	9f 81       	ldd	r25, Y+7	; 0x07
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <DIO_Error_State_tGetPinValue+0x76>
    19ba:	88 c0       	rjmp	.+272    	; 0x1acc <DIO_Error_State_tGetPinValue+0x186>
    19bc:	b4 c0       	rjmp	.+360    	; 0x1b26 <DIO_Error_State_tGetPinValue+0x1e0>
		{
			case DIO_U8_PORTA:*copy_u8returnedPinValue = GET_BIT(DIO_U8_PINA_REG,copy_u8pinId);
    19be:	e9 e3       	ldi	r30, 0x39	; 57
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_Error_State_tGetPinValue+0x92>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	2a 95       	dec	r18
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_Error_State_tGetPinValue+0x8e>
    19dc:	9a 01       	movw	r18, r20
    19de:	28 23       	and	r18, r24
    19e0:	39 23       	and	r19, r25
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_Error_State_tGetPinValue+0xaa>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_Error_State_tGetPinValue+0xa6>
    19f4:	ca 01       	movw	r24, r20
    19f6:	ec 81       	ldd	r30, Y+4	; 0x04
    19f8:	fd 81       	ldd	r31, Y+5	; 0x05
    19fa:	80 83       	st	Z, r24
			if(*copy_u8returnedPinValue==0)
    19fc:	ec 81       	ldd	r30, Y+4	; 0x04
    19fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <DIO_Error_State_tGetPinValue+0xc8>
			{
				*copy_u8returnedPinValue = DIO_U8_LOW;
    1a06:	ec 81       	ldd	r30, Y+4	; 0x04
    1a08:	fd 81       	ldd	r31, Y+5	; 0x05
    1a0a:	10 82       	st	Z, r1
    1a0c:	8f c0       	rjmp	.+286    	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			else
			{
				*copy_u8returnedPinValue = DIO_U8_HIGH;
    1a0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a10:	fd 81       	ldd	r31, Y+5	; 0x05
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 83       	st	Z, r24
    1a16:	8a c0       	rjmp	.+276    	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			break;
			case DIO_U8_PORTB:*copy_u8returnedPinValue = GET_BIT(DIO_U8_PINB_REG,copy_u8pinId);
    1a18:	e6 e3       	ldi	r30, 0x36	; 54
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_Error_State_tGetPinValue+0xec>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	2a 95       	dec	r18
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_Error_State_tGetPinValue+0xe8>
    1a36:	9a 01       	movw	r18, r20
    1a38:	28 23       	and	r18, r24
    1a3a:	39 23       	and	r19, r25
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a9 01       	movw	r20, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_Error_State_tGetPinValue+0x104>
    1a46:	55 95       	asr	r21
    1a48:	47 95       	ror	r20
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_Error_State_tGetPinValue+0x100>
    1a4e:	ca 01       	movw	r24, r20
    1a50:	ec 81       	ldd	r30, Y+4	; 0x04
    1a52:	fd 81       	ldd	r31, Y+5	; 0x05
    1a54:	80 83       	st	Z, r24
			if(*copy_u8returnedPinValue==0)
    1a56:	ec 81       	ldd	r30, Y+4	; 0x04
    1a58:	fd 81       	ldd	r31, Y+5	; 0x05
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 23       	and	r24, r24
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <DIO_Error_State_tGetPinValue+0x122>
			{
				*copy_u8returnedPinValue = DIO_U8_LOW;
    1a60:	ec 81       	ldd	r30, Y+4	; 0x04
    1a62:	fd 81       	ldd	r31, Y+5	; 0x05
    1a64:	10 82       	st	Z, r1
    1a66:	62 c0       	rjmp	.+196    	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			else
			{
				*copy_u8returnedPinValue = DIO_U8_HIGH;
    1a68:	ec 81       	ldd	r30, Y+4	; 0x04
    1a6a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 83       	st	Z, r24
    1a70:	5d c0       	rjmp	.+186    	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			break;
			case DIO_U8_PORTC:*copy_u8returnedPinValue = GET_BIT(DIO_U8_PINC_REG,copy_u8pinId);
    1a72:	e3 e3       	ldi	r30, 0x33	; 51
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_Error_State_tGetPinValue+0x146>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	2a 95       	dec	r18
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_Error_State_tGetPinValue+0x142>
    1a90:	9a 01       	movw	r18, r20
    1a92:	28 23       	and	r18, r24
    1a94:	39 23       	and	r19, r25
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_Error_State_tGetPinValue+0x15e>
    1aa0:	55 95       	asr	r21
    1aa2:	47 95       	ror	r20
    1aa4:	8a 95       	dec	r24
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_Error_State_tGetPinValue+0x15a>
    1aa8:	ca 01       	movw	r24, r20
    1aaa:	ec 81       	ldd	r30, Y+4	; 0x04
    1aac:	fd 81       	ldd	r31, Y+5	; 0x05
    1aae:	80 83       	st	Z, r24
			if(*copy_u8returnedPinValue==0)
    1ab0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 23       	and	r24, r24
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <DIO_Error_State_tGetPinValue+0x17c>
			{
				*copy_u8returnedPinValue = DIO_U8_LOW;
    1aba:	ec 81       	ldd	r30, Y+4	; 0x04
    1abc:	fd 81       	ldd	r31, Y+5	; 0x05
    1abe:	10 82       	st	Z, r1
    1ac0:	35 c0       	rjmp	.+106    	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			else
			{
				*copy_u8returnedPinValue = DIO_U8_HIGH;
    1ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	80 83       	st	Z, r24
    1aca:	30 c0       	rjmp	.+96     	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			break;
			case DIO_U8_PORTD:*copy_u8returnedPinValue = GET_BIT(DIO_U8_PIND_REG,copy_u8pinId);
    1acc:	e0 e3       	ldi	r30, 0x30	; 48
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_Error_State_tGetPinValue+0x1a0>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	2a 95       	dec	r18
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_Error_State_tGetPinValue+0x19c>
    1aea:	9a 01       	movw	r18, r20
    1aec:	28 23       	and	r18, r24
    1aee:	39 23       	and	r19, r25
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a9 01       	movw	r20, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_Error_State_tGetPinValue+0x1b8>
    1afa:	55 95       	asr	r21
    1afc:	47 95       	ror	r20
    1afe:	8a 95       	dec	r24
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_Error_State_tGetPinValue+0x1b4>
    1b02:	ca 01       	movw	r24, r20
    1b04:	ec 81       	ldd	r30, Y+4	; 0x04
    1b06:	fd 81       	ldd	r31, Y+5	; 0x05
    1b08:	80 83       	st	Z, r24
			if(*copy_u8returnedPinValue==0)
    1b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 23       	and	r24, r24
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <DIO_Error_State_tGetPinValue+0x1d6>
			{
				*copy_u8returnedPinValue = DIO_U8_LOW;
    1b14:	ec 81       	ldd	r30, Y+4	; 0x04
    1b16:	fd 81       	ldd	r31, Y+5	; 0x05
    1b18:	10 82       	st	Z, r1
    1b1a:	08 c0       	rjmp	.+16     	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			else
			{
				*copy_u8returnedPinValue = DIO_U8_HIGH;
    1b1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 83       	st	Z, r24
    1b24:	03 c0       	rjmp	.+6      	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			}
			break;
			default:
			L_enumFunctionState = RET_NOK;
    1b26:	19 82       	std	Y+1, r1	; 0x01
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <DIO_Error_State_tGetPinValue+0x1e6>
			break;
		}
	}
	else
	{
		L_enumFunctionState  =RET_NOK;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b2e:	27 96       	adiw	r28, 0x07	; 7
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_Error_State_tSetPortDirection>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tSetPortDirection(u8 copy_u8portId, u8 copy_u8portDirection)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	2d 97       	sbiw	r28, 0x0d	; 13
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t L_enumFunctionState = RET_OK;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8portDirection==DIO_U8_OUTPUT||copy_u8portDirection==DIO_U8_INPUT)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <DIO_Error_State_tSetPortDirection+0x2a>
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	88 23       	and	r24, r24
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <DIO_Error_State_tSetPortDirection+0x2a>
    1b68:	86 c0       	rjmp	.+268    	; 0x1c76 <DIO_Error_State_tSetPortDirection+0x136>
	{
		switch(copy_u8portId)
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3d 87       	std	Y+13, r19	; 0x0d
    1b72:	2c 87       	std	Y+12, r18	; 0x0c
    1b74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b76:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	79 f1       	breq	.+94     	; 0x1bdc <DIO_Error_State_tSetPortDirection+0x9c>
    1b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b80:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b82:	22 30       	cpi	r18, 0x02	; 2
    1b84:	31 05       	cpc	r19, r1
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <DIO_Error_State_tSetPortDirection+0x52>
    1b88:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f0       	breq	.+26     	; 0x1baa <DIO_Error_State_tSetPortDirection+0x6a>
    1b90:	70 c0       	rjmp	.+224    	; 0x1c72 <DIO_Error_State_tSetPortDirection+0x132>
    1b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b94:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	c9 f1       	breq	.+114    	; 0x1c0e <DIO_Error_State_tSetPortDirection+0xce>
    1b9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <DIO_Error_State_tSetPortDirection+0x68>
    1ba6:	4c c0       	rjmp	.+152    	; 0x1c40 <DIO_Error_State_tSetPortDirection+0x100>
    1ba8:	64 c0       	rjmp	.+200    	; 0x1c72 <DIO_Error_State_tSetPortDirection+0x132>
		{
			case DIO_U8_PORTA:
				switch(copy_u8portDirection)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3b 87       	std	Y+11, r19	; 0x0b
    1bb2:	2a 87       	std	Y+10, r18	; 0x0a
    1bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	51 f0       	breq	.+20     	; 0x1bd0 <DIO_Error_State_tSetPortDirection+0x90>
    1bbc:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bbe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bc0:	21 30       	cpi	r18, 0x01	; 1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	49 f4       	brne	.+18     	; 0x1bd8 <DIO_Error_State_tSetPortDirection+0x98>
				{
					case DIO_U8_OUTPUT:DIO_U8_DDRA_REG = 0XFF;break;
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	80 83       	st	Z, r24
    1bce:	54 c0       	rjmp	.+168    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					case DIO_U8_INPUT :DIO_U8_DDRA_REG = 0X00;break;
    1bd0:	ea e3       	ldi	r30, 0x3A	; 58
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	10 82       	st	Z, r1
    1bd6:	50 c0       	rjmp	.+160    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					default: L_enumFunctionState = RET_NOK;break;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	4e c0       	rjmp	.+156    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
				}
			break;
			case DIO_U8_PORTB:
				switch(copy_u8portDirection)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	39 87       	std	Y+9, r19	; 0x09
    1be4:	28 87       	std	Y+8, r18	; 0x08
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	99 85       	ldd	r25, Y+9	; 0x09
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	51 f0       	breq	.+20     	; 0x1c02 <DIO_Error_State_tSetPortDirection+0xc2>
    1bee:	28 85       	ldd	r18, Y+8	; 0x08
    1bf0:	39 85       	ldd	r19, Y+9	; 0x09
    1bf2:	21 30       	cpi	r18, 0x01	; 1
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	49 f4       	brne	.+18     	; 0x1c0a <DIO_Error_State_tSetPortDirection+0xca>
				{
					case DIO_U8_OUTPUT:DIO_U8_DDRB_REG = 0XFF;break;
    1bf8:	e7 e3       	ldi	r30, 0x37	; 55
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	80 83       	st	Z, r24
    1c00:	3b c0       	rjmp	.+118    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					case DIO_U8_INPUT :DIO_U8_DDRB_REG = 0X00;break;
    1c02:	e7 e3       	ldi	r30, 0x37	; 55
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	10 82       	st	Z, r1
    1c08:	37 c0       	rjmp	.+110    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					default: L_enumFunctionState = RET_NOK;break;
    1c0a:	19 82       	std	Y+1, r1	; 0x01
    1c0c:	35 c0       	rjmp	.+106    	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
				}
			break;
			case DIO_U8_PORTC:
				switch(copy_u8portDirection)
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3f 83       	std	Y+7, r19	; 0x07
    1c16:	2e 83       	std	Y+6, r18	; 0x06
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	51 f0       	breq	.+20     	; 0x1c34 <DIO_Error_State_tSetPortDirection+0xf4>
    1c20:	2e 81       	ldd	r18, Y+6	; 0x06
    1c22:	3f 81       	ldd	r19, Y+7	; 0x07
    1c24:	21 30       	cpi	r18, 0x01	; 1
    1c26:	31 05       	cpc	r19, r1
    1c28:	49 f4       	brne	.+18     	; 0x1c3c <DIO_Error_State_tSetPortDirection+0xfc>
				{
					case DIO_U8_OUTPUT:DIO_U8_DDRC_REG = 0XFF;break;
    1c2a:	e4 e3       	ldi	r30, 0x34	; 52
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 83       	st	Z, r24
    1c32:	22 c0       	rjmp	.+68     	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					case DIO_U8_INPUT :DIO_U8_DDRC_REG = 0X00;break;
    1c34:	e4 e3       	ldi	r30, 0x34	; 52
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	10 82       	st	Z, r1
    1c3a:	1e c0       	rjmp	.+60     	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					default: L_enumFunctionState = RET_NOK;break;
    1c3c:	19 82       	std	Y+1, r1	; 0x01
    1c3e:	1c c0       	rjmp	.+56     	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
				}
			break;
			case DIO_U8_PORTD:
				switch(copy_u8portDirection)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	51 f0       	breq	.+20     	; 0x1c66 <DIO_Error_State_tSetPortDirection+0x126>
    1c52:	2c 81       	ldd	r18, Y+4	; 0x04
    1c54:	3d 81       	ldd	r19, Y+5	; 0x05
    1c56:	21 30       	cpi	r18, 0x01	; 1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	49 f4       	brne	.+18     	; 0x1c6e <DIO_Error_State_tSetPortDirection+0x12e>
				{
					case DIO_U8_OUTPUT:DIO_U8_DDRD_REG = 0XFF;break;
    1c5c:	e1 e3       	ldi	r30, 0x31	; 49
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	80 83       	st	Z, r24
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					case DIO_U8_INPUT :DIO_U8_DDRD_REG = 0X00;break;
    1c66:	e1 e3       	ldi	r30, 0x31	; 49
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	10 82       	st	Z, r1
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
					default: L_enumFunctionState = RET_NOK;break;
    1c6e:	19 82       	std	Y+1, r1	; 0x01
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
				}
			break;
			default: L_enumFunctionState = RET_NOK;
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <DIO_Error_State_tSetPortDirection+0x138>
		}
	}
	else
	{
		L_enumFunctionState = RET_NOK;
    1c76:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7a:	2d 96       	adiw	r28, 0x0d	; 13
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <DIO_Error_State_tSetPortValue>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tSetPortValue(u8 copy_u8portId, u8 copy_u8portValue)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <DIO_Error_State_tSetPortValue+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <DIO_Error_State_tSetPortValue+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
    1c9c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t L_enumFunctionState = RET_OK;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8portId)
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3d 83       	std	Y+5, r19	; 0x05
    1caa:	2c 83       	std	Y+4, r18	; 0x04
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	d1 f0       	breq	.+52     	; 0x1cea <DIO_Error_State_tSetPortValue+0x5e>
    1cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <DIO_Error_State_tSetPortValue+0x3e>
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <DIO_Error_State_tSetPortValue+0x54>
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <DIO_Error_State_tSetPortValue+0x7c>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <DIO_Error_State_tSetPortValue+0x68>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <DIO_Error_State_tSetPortValue+0x72>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <DIO_Error_State_tSetPortValue+0x7c>
	{
		case DIO_U8_PORTA: DIO_U8_PORTA_REG = copy_u8portValue;break;
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	80 83       	st	Z, r24
    1ce8:	10 c0       	rjmp	.+32     	; 0x1d0a <DIO_Error_State_tSetPortValue+0x7e>
		case DIO_U8_PORTB: DIO_U8_PORTB_REG = copy_u8portValue;break;
    1cea:	e8 e3       	ldi	r30, 0x38	; 56
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	80 83       	st	Z, r24
    1cf2:	0b c0       	rjmp	.+22     	; 0x1d0a <DIO_Error_State_tSetPortValue+0x7e>
		case DIO_U8_PORTC: DIO_U8_PORTC_REG = copy_u8portValue;break;
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	80 83       	st	Z, r24
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <DIO_Error_State_tSetPortValue+0x7e>
		case DIO_U8_PORTD: DIO_U8_PORTD_REG = copy_u8portValue;break;
    1cfe:	e2 e3       	ldi	r30, 0x32	; 50
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	80 83       	st	Z, r24
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <DIO_Error_State_tSetPortValue+0x7e>
		default: L_enumFunctionState = RET_NOK;break;
    1d08:	19 82       	std	Y+1, r1	; 0x01
	}
	return L_enumFunctionState;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <DIO_Error_State_tGetPortValue>:
/****************************************************************/
/****************************************************************/
/****************************************************************/
/****************************************************************/
Error_State_t DIO_Error_State_tGetPortValue(u8 copy_u8portId, u8 *copy_u8returnedportValue)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <DIO_Error_State_tGetPortValue+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_Error_State_tGetPortValue+0x8>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_Error_State_tGetPortValue+0xa>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	7c 83       	std	Y+4, r23	; 0x04
    1d2e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t L_enumFunctionState = RET_OK;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
	if(NULL!=copy_u8returnedportValue)
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	e9 f1       	breq	.+122    	; 0x1db6 <DIO_Error_State_tGetPortValue+0x9a>
	{
		switch(copy_u8portId)
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3e 83       	std	Y+6, r19	; 0x06
    1d44:	2d 83       	std	Y+5, r18	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	e1 f0       	breq	.+56     	; 0x1d88 <DIO_Error_State_tGetPortValue+0x6c>
    1d50:	2d 81       	ldd	r18, Y+5	; 0x05
    1d52:	3e 81       	ldd	r19, Y+6	; 0x06
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <DIO_Error_State_tGetPortValue+0x48>
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <DIO_Error_State_tGetPortValue+0x5e>
    1d62:	27 c0       	rjmp	.+78     	; 0x1db2 <DIO_Error_State_tGetPortValue+0x96>
    1d64:	2d 81       	ldd	r18, Y+5	; 0x05
    1d66:	3e 81       	ldd	r19, Y+6	; 0x06
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	a1 f0       	breq	.+40     	; 0x1d96 <DIO_Error_State_tGetPortValue+0x7a>
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	b1 f0       	breq	.+44     	; 0x1da4 <DIO_Error_State_tGetPortValue+0x88>
    1d78:	1c c0       	rjmp	.+56     	; 0x1db2 <DIO_Error_State_tGetPortValue+0x96>
		{
			case DIO_U8_PORTA: *copy_u8returnedportValue = DIO_U8_PINA_REG;break;
    1d7a:	e9 e3       	ldi	r30, 0x39	; 57
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	eb 81       	ldd	r30, Y+3	; 0x03
    1d82:	fc 81       	ldd	r31, Y+4	; 0x04
    1d84:	80 83       	st	Z, r24
    1d86:	19 c0       	rjmp	.+50     	; 0x1dba <DIO_Error_State_tGetPortValue+0x9e>
			case DIO_U8_PORTB: *copy_u8returnedportValue = DIO_U8_PINB_REG;break;
    1d88:	e6 e3       	ldi	r30, 0x36	; 54
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d90:	fc 81       	ldd	r31, Y+4	; 0x04
    1d92:	80 83       	st	Z, r24
    1d94:	12 c0       	rjmp	.+36     	; 0x1dba <DIO_Error_State_tGetPortValue+0x9e>
			case DIO_U8_PORTC: *copy_u8returnedportValue = DIO_U8_PINC_REG;break;
    1d96:	e3 e3       	ldi	r30, 0x33	; 51
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1da0:	80 83       	st	Z, r24
    1da2:	0b c0       	rjmp	.+22     	; 0x1dba <DIO_Error_State_tGetPortValue+0x9e>
			case DIO_U8_PORTD: *copy_u8returnedportValue = DIO_U8_PIND_REG;break;
    1da4:	e0 e3       	ldi	r30, 0x30	; 48
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dac:	fc 81       	ldd	r31, Y+4	; 0x04
    1dae:	80 83       	st	Z, r24
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <DIO_Error_State_tGetPortValue+0x9e>
			default: L_enumFunctionState = RET_NOK;
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_Error_State_tGetPortValue+0x9e>
		}
	}
	else
	{
		L_enumFunctionState = RET_NULL_PTR;
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	return L_enumFunctionState;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dbc:	26 96       	adiw	r28, 0x06	; 6
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <APP_voidTrifficLightInit>:
 * this function initialize the LEDs of the cars.
 * it store which LED is work in the global flag APP_u8_LightControlFlag.
 * we store which led is work to we can detect what our action we the interrupt occur
 * */
void APP_voidTrifficLightInit(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62

	/*Green LED*/
	DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_HIGH);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	APP_u8_LightControlFlag = APP_U8_GREEN_LED;
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	80 93 77 01 	sts	0x0177, r24
	DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	TIMERS_voidTimerDelay_ms(5000);
    1df0:	88 e8       	ldi	r24, 0x88	; 136
    1df2:	93 e1       	ldi	r25, 0x13	; 19
    1df4:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
	DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_LOW);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>

	/*Yellow LED*/
	APP_voidYellowLedBlink();
    1e0c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <APP_voidYellowLedBlink>

	/*Red LED*/
	DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	APP_u8_LightControlFlag = APP_U8_RED_LED;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	80 93 77 01 	sts	0x0177, r24
	DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_HIGH);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	TIMERS_voidTimerDelay_ms(5000);
    1e2a:	88 e8       	ldi	r24, 0x88	; 136
    1e2c:	93 e1       	ldi	r25, 0x13	; 19
    1e2e:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
	DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
	DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_LOW);
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>

	/*Yellow LED*/
	APP_voidYellowLedBlink();
    1e46:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <APP_voidYellowLedBlink>


}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <APP_voidYellowLedBlink>:
/*
 * this function to make the yellow-led blink in the cars and pedestrian in the same time during the 5 sec
 * it is just make a counter to control this process
 * */
void APP_voidYellowLedBlink(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <APP_voidYellowLedBlink+0x6>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	u32 L_CounterDelay = 0;
    1e5a:	1a 82       	std	Y+2, r1	; 0x02
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	24 c0       	rjmp	.+72     	; 0x1ea8 <APP_voidYellowLedBlink+0x58>
	while(L_CounterDelay < 5)
	{
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_HIGH);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_u8_LightControlFlag = APP_U8_YELLOW_LED;
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	80 93 77 01 	sts	0x0177, r24
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_HIGH);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(600);
    1e7a:	88 e5       	ldi	r24, 0x58	; 88
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(520);
    1e96:	88 e0       	ldi	r24, 0x08	; 8
    1e98:	92 e0       	ldi	r25, 0x02	; 2
    1e9a:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		L_CounterDelay++;
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
 * it is just make a counter to control this process
 * */
void APP_voidYellowLedBlink(void)
{
	u32 L_CounterDelay = 0;
	while(L_CounterDelay < 5)
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	85 30       	cpi	r24, 0x05	; 5
    1eae:	91 05       	cpc	r25, r1
    1eb0:	b8 f2       	brcs	.-82     	; 0x1e60 <APP_voidYellowLedBlink+0x10>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
		TIMERS_voidTimerDelay_ms(520);
		L_CounterDelay++;
	}
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <APP_voidCarYellowLedBlink>:
/*
 * this function make the yellow-led cars blink
 * it control this process by using counter and delay function which we make by using the timer in normal mode
 * */
void APP_voidCarYellowLedBlink(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <APP_voidCarYellowLedBlink+0x6>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	u32 L_CounterDelay = 0;
    1ec6:	1a 82       	std	Y+2, r1	; 0x02
    1ec8:	19 82       	std	Y+1, r1	; 0x01
    1eca:	1a c0       	rjmp	.+52     	; 0x1f00 <APP_voidCarYellowLedBlink+0x44>
	while(L_CounterDelay < 5)
	{
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_HIGH);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_u8_LightControlFlag = APP_U8_YELLOW_LED;
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	80 93 77 01 	sts	0x0177, r24
		TIMERS_voidTimerDelay_ms(600);
    1edc:	88 e5       	ldi	r24, 0x58	; 88
    1ede:	92 e0       	ldi	r25, 0x02	; 2
    1ee0:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(520);
    1eee:	88 e0       	ldi	r24, 0x08	; 8
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		L_CounterDelay++;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
 * it control this process by using counter and delay function which we make by using the timer in normal mode
 * */
void APP_voidCarYellowLedBlink(void)
{
	u32 L_CounterDelay = 0;
	while(L_CounterDelay < 5)
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	85 30       	cpi	r24, 0x05	; 5
    1f06:	91 05       	cpc	r25, r1
    1f08:	08 f3       	brcs	.-62     	; 0x1ecc <APP_voidCarYellowLedBlink+0x10>
		TIMERS_voidTimerDelay_ms(600);
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
		TIMERS_voidTimerDelay_ms(520);
		L_CounterDelay++;
	}
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <APP_voidGetTrafficLightState>:
 *  and the pedestrian's Green LED is still on.
 *  After the five seconds the pedestrian Green LED will be off and both the pedestrian Red LED and the cars' Green LED will be on.
 *  Traffic lights signals are going to the normal mode again.
 * */
void APP_voidGetTrafficLightState(void)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <APP_voidGetTrafficLightState+0x6>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
	switch(APP_u8_LightControlFlag)
    1f1e:	80 91 77 01 	lds	r24, 0x0177
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	3a 83       	std	Y+2, r19	; 0x02
    1f28:	29 83       	std	Y+1, r18	; 0x01
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	82 30       	cpi	r24, 0x02	; 2
    1f30:	91 05       	cpc	r25, r1
    1f32:	39 f0       	breq	.+14     	; 0x1f42 <APP_voidGetTrafficLightState+0x2e>
    1f34:	29 81       	ldd	r18, Y+1	; 0x01
    1f36:	3a 81       	ldd	r19, Y+2	; 0x02
    1f38:	23 30       	cpi	r18, 0x03	; 3
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <APP_voidGetTrafficLightState+0x2c>
    1f3e:	4f c0       	rjmp	.+158    	; 0x1fde <APP_voidGetTrafficLightState+0xca>
    1f40:	8d c0       	rjmp	.+282    	; 0x205c <APP_voidGetTrafficLightState+0x148>
	{
	case APP_U8_YELLOW_LED:
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);  // pedestrian REG-LED OFF
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);  // cars YELLOW-LED OFF
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_voidYellowLedBlink();                                           // car and pedestrian YELLOW-LED Blink
    1f56:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <APP_voidYellowLedBlink>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);  // pedestrian YELLOW-LED OFF
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);  // cars YELLOW-LED OFF
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_HIGH);  // pedestrian GREEN-LED ON
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);  // cars RED-LED ON
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(5000);									     // delay
    1f82:	88 e8       	ldi	r24, 0x88	; 136
    1f84:	93 e1       	ldi	r25, 0x13	; 19
    1f86:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);   // cars RED-LED OFF
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_voidCarYellowLedBlink();
    1f94:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <APP_voidCarYellowLedBlink>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_LOW);  // pedestrian GREEN-LED OFF
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	62 e0       	ldi	r22, 0x02	; 2
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);  // cars YELLOW-LED OFF
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);  // pedestrian RED-LED ON
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_HIGH);  // cars GREEN-LED ON
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(5000);									     // delay
    1fc0:	88 e8       	ldi	r24, 0x88	; 136
    1fc2:	93 e1       	ldi	r25, 0x13	; 19
    1fc4:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_LOW);  // cars GREEN-LED OFF
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW);  // pedestrian RED-LED OFF
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <APP_voidGetTrafficLightState+0x148>
		break;
	case APP_U8_GREEN_LED:
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_LOW); // pedestrian RED-LED OFF
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_LOW);  // cars GREEN-LED OFF
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_voidYellowLedBlink();
    1ff2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <APP_voidYellowLedBlink>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN1,DIO_U8_LOW);  // pedestrian YELLOW-LED OFF
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	61 e0       	ldi	r22, 0x01	; 1
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);  // cars YELLOW-LED OFF
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_HIGH);  // pedestrian GREEN-LED ON
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	62 e0       	ldi	r22, 0x02	; 2
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);  // cars RED-LED ON
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		TIMERS_voidTimerDelay_ms(5000);									     // delay
    201e:	88 e8       	ldi	r24, 0x88	; 136
    2020:	93 e1       	ldi	r25, 0x13	; 19
    2022:	0e 94 53 06 	call	0xca6	; 0xca6 <TIMERS_voidTimerDelay_ms>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);   // cars RED-LED OFF
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		APP_voidCarYellowLedBlink();
    2030:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <APP_voidCarYellowLedBlink>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);  // cars YELLOW-LED OFF
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_LOW);  // pedestrian GREEN-LED OFF
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	62 e0       	ldi	r22, 0x02	; 2
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN0,DIO_U8_HIGH);  // pedestrian RED-LED ON
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		DIO_Error_State_tSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_HIGH);  // cars GREEN-LED ON
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		break;
	}
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <APP_voidToggleLED>:


void APP_voidToggleLED(void)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(0 == flag)
    206e:	80 91 76 01 	lds	r24, 0x0176
    2072:	88 23       	and	r24, r24
    2074:	49 f4       	brne	.+18     	; 0x2088 <APP_voidToggleLED+0x22>
	{
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_HIGH);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		flag = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	80 93 76 01 	sts	0x0176, r24
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <APP_voidToggleLED+0x30>
	}
	else
	{
		DIO_Error_State_tSetPinValue(DIO_U8_PORTC,DIO_U8_PIN2,DIO_U8_LOW);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <DIO_Error_State_tSetPinValue>
		flag = 0;
    2092:	10 92 76 01 	sts	0x0176, r1
	}
}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <main>:
#include "main.h"



int main(void)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8ReturnNTI0State = 0;
    20a6:	19 82       	std	Y+1, r1	; 0x01
	/*DIO Init*/
	DIO_voidInit();
    20a8:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_voidInit>
	/*Enable the GLobal Interrupt */
	GIE_voidEnable();
    20ac:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GIE_voidEnable>
	/*set EXTI callback function*/
	EXTI_Error_State_tEXTICallBack(&APP_voidGetTrafficLightState,EXTI_U8_INT0);
    20b0:	8a e8       	ldi	r24, 0x8A	; 138
    20b2:	9f e0       	ldi	r25, 0x0F	; 15
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	0e 94 6f 09 	call	0x12de	; 0x12de <EXTI_Error_State_tEXTICallBack>
	/*Enable EXTI INT0*/
	EXTI_Error_StateEnable(EXTI_U8_INT0,EXTI_U8_RAISING_EDGE);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EXTI_Error_StateEnable>

	while(1)
	{
		APP_voidTrifficLightInit();
    20c2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <APP_voidTrifficLightInit>
    20c6:	fd cf       	rjmp	.-6      	; 0x20c2 <main+0x26>

000020c8 <__prologue_saves__>:
    20c8:	2f 92       	push	r2
    20ca:	3f 92       	push	r3
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	ca 1b       	sub	r28, r26
    20f2:	db 0b       	sbc	r29, r27
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	09 94       	ijmp

00002100 <__epilogue_restores__>:
    2100:	2a 88       	ldd	r2, Y+18	; 0x12
    2102:	39 88       	ldd	r3, Y+17	; 0x11
    2104:	48 88       	ldd	r4, Y+16	; 0x10
    2106:	5f 84       	ldd	r5, Y+15	; 0x0f
    2108:	6e 84       	ldd	r6, Y+14	; 0x0e
    210a:	7d 84       	ldd	r7, Y+13	; 0x0d
    210c:	8c 84       	ldd	r8, Y+12	; 0x0c
    210e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2110:	aa 84       	ldd	r10, Y+10	; 0x0a
    2112:	b9 84       	ldd	r11, Y+9	; 0x09
    2114:	c8 84       	ldd	r12, Y+8	; 0x08
    2116:	df 80       	ldd	r13, Y+7	; 0x07
    2118:	ee 80       	ldd	r14, Y+6	; 0x06
    211a:	fd 80       	ldd	r15, Y+5	; 0x05
    211c:	0c 81       	ldd	r16, Y+4	; 0x04
    211e:	1b 81       	ldd	r17, Y+3	; 0x03
    2120:	aa 81       	ldd	r26, Y+2	; 0x02
    2122:	b9 81       	ldd	r27, Y+1	; 0x01
    2124:	ce 0f       	add	r28, r30
    2126:	d1 1d       	adc	r29, r1
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	ed 01       	movw	r28, r26
    2134:	08 95       	ret

00002136 <_exit>:
    2136:	f8 94       	cli

00002138 <__stop_program>:
    2138:	ff cf       	rjmp	.-2      	; 0x2138 <__stop_program>
